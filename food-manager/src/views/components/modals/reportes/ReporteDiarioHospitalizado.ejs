<div id="modalReporteHospitalizados"
    class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full h-5/6 overflow-auto">
        <h2 class="text-2xl font-semibold mb-4 text-center">Reporte de Pacientes Hospitalizados</h2>
        
        <!-- Filtro por Unidad -->
        <div class="mb-4">
            <label for="unidadFilter" class="block text-lg font-semibold">Filtrar por Unidad:</label>
            <input id="unidadFilter" type="text" class="w-full px-4 py-2 border rounded"
                placeholder="Buscar Unidad..." />
            <ul id="unidadSuggestions" class="absolute bg-white border rounded w-full hidden"></ul>
        </div>

        <!-- Contenedor para los reportes -->
        <div id="reportesContainer">
            <!-- Aquí se renderizarán los reportes por unidad -->
        </div>

        <!-- Botones -->
        <div class="mt-6 flex justify-end space-x-4">
            <button id="printPDF" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-500">Imprimir PDF</button>
            <button id="closeModalReparto" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-500">Cerrar</button>
        </div>
    </div>
</div>


<script>
   document.addEventListener('DOMContentLoaded', () => {
    const unidadFilterInput = document.getElementById('unidadFilter');
    const unidadSuggestions = document.getElementById('unidadSuggestions');
    const reportesContainer = document.getElementById('reportesContainer');
    const printPDFBtn = document.getElementById('printPDF');
    const closeModalBtn = document.getElementById('closeModal');

    let unidades = [];
    let reportes = {};

    // Obtener unidades y reportes del servidor
    async function fetchReportes() {
        try {
            const response = await axios.get('/food-manager/report/reporte-hospitalizados-diario');
            reportes = response.data.data;
            unidades = Object.keys(reportes);
            renderReportes();
        } catch (error) {
            console.error("Error al obtener los reportes:", error);
        }
    }

    // Mostrar reportes por unidad
    function renderReportes(unidad = '') {
        reportesContainer.innerHTML = '';

        for (const [unidadKey, pacientes] of Object.entries(reportes)) {
            if (unidad && unidadKey !== unidad) continue;

            const unidadDiv = document.createElement('div');
            unidadDiv.classList.add('mb-6');

            const unidadTitle = document.createElement('h3');
            unidadTitle.classList.add('text-xl', 'font-semibold', 'mb-2');
            unidadTitle.textContent = `Unidad: ${unidadKey}`;
            unidadDiv.appendChild(unidadTitle);

            const table = document.createElement('table');
            table.classList.add('min-w-full', 'text-left', 'text-base', 'text-black', 'whitespace-nowrap');
            table.innerHTML = `
                <thead class="bg-gray-200">
                    <tr>
                        <th class="px-2 py-2">Código de Cama</th>
                        <th class="px-2 py-2">RUT Paciente</th>
                        <th class="px-2 py-2">Nombre Paciente</th>
                        <th class="px-2 py-2">Régimen</th>
                        <th class="px-2 py-2">Observaciones</th>
                    </tr>
                </thead>
                <tbody>
                    ${pacientes
                        .map(
                            (p) => `
                        <tr class="border-b">
                            <td class="px-2 py-2">${p.CodigoCama}</td>
                            <td class="px-2 py-2">${p.RutPaciente}</td>
                            <td class="px-2 py-2">${p.NombrePaciente}</td>
                            <td class="px-2 py-2">${p.DescTipoRegimen}</td>
                            <td class="px-2 py-2">${p.ObservacionesNutricionista}</td>
                        </tr>`
                        )
                        .join('')}
                </tbody>
            `;
            unidadDiv.appendChild(table);
            reportesContainer.appendChild(unidadDiv);
        }
    }

    // Filtrar reportes
    unidadFilterInput.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase();
        const filteredUnidades = unidades.filter((unidad) =>
            unidad.toLowerCase().includes(query)
        );

        unidadSuggestions.innerHTML = filteredUnidades
            .map((unidad) => `<li class="px-4 py-2 cursor-pointer hover:bg-gray-200">${unidad}</li>`)
            .join('');

        unidadSuggestions.classList.remove('hidden');
        unidadSuggestions.querySelectorAll('li').forEach((item) =>
            item.addEventListener('click', () => {
                unidadFilterInput.value = item.textContent;
                unidadSuggestions.classList.add('hidden');
                renderReportes(item.textContent);
            })
        );
    });

    // Imprimir PDF
    printPDFBtn.addEventListener('click', () => {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF();
    const reportesContainer = document.getElementById('reportesContainer');

    // Título del PDF
    let yOffset = 10; // Coordenada Y inicial
    pdf.setFontSize(16);
    pdf.text("Reporte de Pacientes Hospitalizados", 10, yOffset);
    yOffset += 10;

    // Iterar sobre cada sección de la unidad en el contenedor
    const unidades = reportesContainer.querySelectorAll('div.mb-6'); // Cada unidad está en un div con clase "mb-6"

    unidades.forEach((unidadDiv) => {
        // Título de la unidad
        const unidadTitle = unidadDiv.querySelector('h3');
        if (unidadTitle) {
            pdf.setFontSize(14);
            pdf.text(unidadTitle.textContent, 10, yOffset);
            yOffset += 10;
        }

        // Tabla de pacientes
        const rows = [];
        const tableHeaders = ["Código de Cama", "RUT Paciente", "Nombre Paciente", "Régimen", "Observaciones"];
        const pacientes = unidadDiv.querySelectorAll('tbody tr');
        pacientes.forEach((pacienteRow) => {
            const columns = pacienteRow.querySelectorAll('td');
            const rowData = Array.from(columns).map((col) => col.textContent.trim());
            rows.push(rowData);
        });

        // Renderizar la tabla
        if (rows.length > 0) {
            pdf.setFontSize(12);
            pdf.autoTable({
                startY: yOffset,
                head: [tableHeaders],
                body: rows,
                margin: { top: 10, left: 10, right: 10 },
                theme: 'grid',
                styles: { fontSize: 10 },
            });
            yOffset = pdf.lastAutoTable.finalY + 10; // Actualizar la posición Y después de la tabla
        }
    });

    // Guardar el PDF
    pdf.save('ReporteHospitalizados.pdf');
});


    fetchReportes();
});


</script>
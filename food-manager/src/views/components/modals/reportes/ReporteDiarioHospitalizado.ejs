<div id="modalReporteHospitalizados"
    class="fixed inset-0 flex items-center justify-center hidden bg-black bg-opacity-50">
    <div class="w-5/6 p-6 overflow-auto bg-white rounded-lg shadow-lg h-5/6">
        <h2 class="mb-4 text-2xl font-semibold text-center">Reporte de Pacientes Hospitalizados</h2>
        
        <!-- Filtro por Unidad -->
        <div class="mb-4">
            <label for="unidadFilter" class="block text-lg font-semibold">Filtrar por Unidad:</label>
            <input id="unidadFilter" type="text" class="w-full px-4 py-2 border rounded"
                placeholder="Buscar Unidad..." />
            <ul id="unidadSuggestions" class="absolute hidden w-full bg-white border rounded"></ul>
        </div>

        <!-- Contenedor para los reportes -->
        <div id="reportesContainer">
            <!-- AquÃ­ se renderizarÃ¡n los reportes por unidad -->
        </div>

        <!-- Botones -->
        <div class="flex justify-end mt-6 space-x-4">
            <button id="printPDF" class="px-4 py-2 text-white bg-green-600 rounded hover:bg-green-500">Imprimir PDF</button>
            <button id="closeModalReparto" class="px-4 py-2 text-white bg-red-600 rounded hover:bg-red-500">Cerrar</button>
        </div>
    </div>
</div>

<style> table {
    table-layout: fixed; /* Habilita el tamaÃ±o fijo de columnas */
    width: 100%; /* Asegura que la tabla ocupe el ancho completo */
    border-collapse: collapse; /* Combina bordes para un diseÃ±o limpio */
}
th, td {
    text-align: left; /* Alinea el texto a la izquierda */
    border: 1px solid #ddd; /* AÃ±ade bordes para mejor visualizaciÃ³n */
    padding: 8px; /* Espaciado interno en las celdas */
    width: 16.6%; /* Define ancho fijo para todas las columnas */
}
thead th {
    background-color: #f3f4f6; /* Color de fondo del encabezado */
    font-weight: bold; /* Texto en negrita */
}</style>

<script>
   document.addEventListener('DOMContentLoaded', () => {
    const unidadFilterInput = document.getElementById('unidadFilter');
    const unidadSuggestions = document.getElementById('unidadSuggestions');
    const reportesContainer = document.getElementById('reportesContainer');
    const printPDFBtn = document.getElementById('printPDF');
    const closeModalBtn = document.getElementById('closeModal');

    let unidades = [];
    let reportes = {};

    // Obtener unidades y reportes del servidor
    async function fetchReportes() {
        try {
            const response = await axios.get('/food-manager/report/reporte-hospitalizados-diario');
            reportes = response.data.data;
            unidades = Object.keys(reportes);
            renderReportes();
        } catch (error) {
            console.error("Error al obtener los reportes:", error);
        }
    }

    // Mostrar reportes por unidad
    function renderReportes(unidad = '') {
    reportesContainer.innerHTML = '';

    for (const [unidadKey, pacientes] of Object.entries(reportes)) {
        if (unidad && unidadKey !== unidad) continue;

        const unidadDiv = document.createElement('div');
        unidadDiv.classList.add('mb-6');

        const unidadTitle = document.createElement('h3');
        unidadTitle.classList.add('text-xl', 'font-semibold', 'mb-2');
        unidadTitle.textContent = `Unidad: ${unidadKey}`;
        unidadDiv.appendChild(unidadTitle);

        const table = document.createElement('table');
        table.classList.add('w-full', 'border', 'border-gray-300');
        table.innerHTML = `
            <thead>
                <tr>
                    <th># Cama</th>
                    <th>RUT Paciente</th>
                    <th>Nombre Paciente</th>
                    <th>RÃ©gimen</th>
                    <th>Observaciones</th>
                    <th>Ayuno</th>
                </tr>
            </thead>
            <tbody>
                ${pacientes
                    .map(
                        (p) => `
                    <tr>
                        <td>${p.CodigoCama}</td>
                        <td>${p.RutPaciente}</td>
                        <td>${p.NombrePaciente}</td>
                        <td>${p.DescTipoRegimen}</td>
                        <td>${p.ObservacionesNutricionista}</td>
                        <td>
                            ${
                                p.enAyuno
                                    ? `<div class="flex items-center justify-center">
                                           <%- include('../../../icons/enAyuno') %>
                                       </div>`
                                    : `<div class="flex items-center justify-center px-2 py-1 text-sm text-gray-500 rounded-full">
                                           ðŸŒŸ No en ayuno ðŸŒŸ
                                       </div>`
                            }
                        </td>
                    </tr>`
                    )
                    .join('')}
            </tbody>
        `;
        unidadDiv.appendChild(table);
        reportesContainer.appendChild(unidadDiv);
    }
}


    // Imprimir PDF
    printPDFBtn.addEventListener('click', () => {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF();
    const reportesContainer = document.getElementById('reportesContainer');

    // TÃ­tulo del PDF
    let yOffset = 10; // Coordenada Y inicial
    pdf.setFontSize(16);
    pdf.text("Reporte de Pacientes Hospitalizados", 10, yOffset);
    yOffset += 10;

    // Iterar sobre cada secciÃ³n de la unidad en el contenedor
    const unidades = reportesContainer.querySelectorAll('div.mb-6'); // Cada unidad estÃ¡ en un div con clase "mb-6"

    unidades.forEach((unidadDiv) => {
        // TÃ­tulo de la unidad
        const unidadTitle = unidadDiv.querySelector('h3');
        if (unidadTitle) {
            pdf.setFontSize(14);
            pdf.text(unidadTitle.textContent, 10, yOffset);
            yOffset += 10;
        }

        // Tabla de pacientes
        const rows = [];
        const tableHeaders = ["CÃ³digo de Cama", "RUT Paciente", "Nombre Paciente", "RÃ©gimen", "Observaciones"];
        const pacientes = unidadDiv.querySelectorAll('tbody tr');
        pacientes.forEach((pacienteRow) => {
            const columns = pacienteRow.querySelectorAll('td');
            const rowData = Array.from(columns).map((col) => col.textContent.trim());
            rows.push(rowData);
        });

        // Renderizar la tabla
        if (rows.length > 0) {
            pdf.setFontSize(12);
            pdf.autoTable({
                startY: yOffset,
                head: [tableHeaders],
                body: rows,
                margin: { top: 10, left: 10, right: 10 },
                theme: 'grid',
                styles: { fontSize: 10 },
            });
            yOffset = pdf.lastAutoTable.finalY + 10; // Actualizar la posiciÃ³n Y despuÃ©s de la tabla
        }
    });

    // Guardar el PDF
    pdf.save('ReporteHospitalizados.pdf');
});


    fetchReportes();
});


</script>